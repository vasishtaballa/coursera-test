package pack;

import java.text.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.*;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;

/*
Tasks  05-09-2017
1. Remove Constructor and add setters and getters -------------Done
2. Maintain the no of transactions a user has made ------------Done
3. Maintain the no of copies of each book ---------------------Done
4. Validating user name ---------------------------------------Done
5. Including the time of borrowing of book --------------------Done
6. Integer.parseInt() for the bookId and check numberformat
   Exception --------------------------------------------------Done
7. If the same book is donated by another user, update the
   hashmap instead of creating a new book ---------------------Done
8. Use StringBuilder to append exceptions and getMessage()
   function ---------------------------------------------------Done
9. Implementing Integer.parseInt() for bookCopies in library
   application ------------------------------------------------Done
10. Learn JMS -------------------------------------------------Done
11. Learn DB2 -------------------------------------------------
12. Brushup sql queries ---------------------------------------Done
13. Java Program to read from external properties file --------Done
14. Java Program to Export data into excel sheet --------------
15. What if web.xml is not present in our project -------------Done
*/

class Transaction {
    private int bookId;
    private int userId;
    private int transactionId;
    public int getTransactionId() {
		return transactionId;
	}
	public void setTransactionId(int transactionId) {
		this.transactionId = transactionId;
	}
	private String dateOfTransaction;
    private String transactionType;
    
    public void setBookId(int bookId) {
        this.bookId = bookId;
    }
    public int getBookId() {
        return this.bookId;
    }
    public void setUserId(int userId) {
        this.userId = userId;
    }
    public int getUserId() {
        return this.userId;
    }
    public void setDateOfTransaction(String dateOfTransaction) {
        this.dateOfTransaction = dateOfTransaction;
    }
    public String getDateOfTransaction() {
        return this.dateOfTransaction;
    }
    public void setTransactionType(String transactionType) {
        this.transactionType = transactionType;
    }
    public String getTransactionType() {
        return this.transactionType;
    }
}

class Book {
    private int bookId;
    private String bookName;
    private String bookAuthor;
    private double bookPrice;
    private boolean bookAvailability;
    public void setBookId(int bookId) {
        this.bookId = bookId;
    }
    public int getBookId() {
        return this.bookId;
    }
    public void setBookName(String bookName) {
        this.bookName = bookName;
    }
    public String getBookName() {
        return this.bookName;
    }
    public void setBookAuthor(String bookAuthor) {
        this.bookAuthor = bookAuthor;
    }
    public String getBookAuthor() {
        return this.bookAuthor;
    }
    public void setBookPrice(double bookPrice) {
        this.bookPrice = bookPrice;
    }
    public double getBookPrice() {
        return this.bookPrice;
    }
    public void setBookAvailability(boolean bookAvailability) {
        this.bookAvailability = bookAvailability;
    }
    public boolean getBookAvailability() {
        return this.bookAvailability;
    }
}

class User {
    private int userId;
    private String userName;
    private int userTransactions;
    public void setUserId(int userId) {
        this.userId = userId;
    }
    public int getUserId() {
        return this.userId;
    }
    public void setUserName(String userName) {
        this.userName = userName;
    }
    public String getUserName() {
        return this.userName;
    }
    public void setUserTransactions(int userTransactions) {
        this.userTransactions = userTransactions;
    }
    public int getUserTransactions() {
        return this.userTransactions;
    }
}
@SuppressWarnings("serial")
class MyException extends Exception {
    MyException(String message) {
        System.out.println(message);
    }
}
public class HelloWorld {
    static ArrayList<User> usersList = new ArrayList<User>();
    static ArrayList<Book> booksList = new ArrayList<Book>();
    static HashMap<Integer, Integer> booksCopies = new HashMap<Integer, Integer>();
    static HashMap<Integer, Integer> booksCopiesTreshold = new HashMap<Integer, Integer>();
    static ArrayList<Transaction> transactionsList = new ArrayList<Transaction>();
    static HashMap<Integer, ArrayList> userTransactionsList = new HashMap<Integer, ArrayList>();
    public static void main(String args[]) {
        System.out.println("Welcome to the Library");
        Scanner sc = new Scanner(System.in);
        setStaticValues();
        while(true) {
            System.out.println("Enter your choice:\n1. Register for the library\n2. Existing User? Borrow the book\n3. Exit");
            try {
                int choice = sc.nextInt();
                HelloWorld lm = new HelloWorld();
                switch(choice) {
                    case 1: 
                        lm.registerUser();
                        break;
                    case 2:
                        lm.existingUser();
                        break;
                    case 3:
                        System.exit(0);
                    default:
                        System.out.println("Please enter a valid option");
                }
            }
            catch(Exception e) {
                System.out.println("Please enter a valid option in exception block");
            }
        }
    }
    public void registerUser() {
        HelloWorld lm = new HelloWorld();
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter your name: ");
        String userName = sc.next();
        if(validateUserName(userName)) {
            int userId = usersList.size() + 1;
            User newUser = new User();
            newUser.setUserId(userId);
            newUser.setUserName(userName);
            usersList.add(newUser);    
        }
        else {
            System.out.println("Username must be alphanumeric only");
        }
    }
    public void existingUser() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter your choice: ");
        System.out.println("1. Borrow a Book\n2. Return a book\n3. Donate a Book\n4. Change your username\n5. List all the books\n6. List users\n7. Know your no of transactions\n8. Know your transactions Details\n9. Write to Excel\n10. Exit");
        try {
            int choice = sc.nextInt();
            HelloWorld lm = new HelloWorld();
            switch(choice) {
                case 1:
                    lm.borrowBook();
                    break;
                case 2:
                    lm.returnBook();
                    break;
                case 3:
                    lm.donateBook();
                    break;
                case 4:
                    lm.changeDetails();
                    break;
                case 5:
                    lm.listAllBooks();
                    break;
                case 6:
                    lm.listUsers();
                    break;
                case 7:
                    lm.knowYourTransactions();
                    break;
                case 8:
                	lm.knowYourTransactionsDetails();
                	break;
                case 9:
                	lm.writeToExcel();
                	break;
                case 10:
                    System.exit(0);
                default:
                    System.out.println("Please Enter a valid option");
            }
        }
        catch(Exception e) {
            System.out.println("Please Enter a valid option in exception");
        }
    }
    public void borrowBook() {
        HelloWorld lm = new HelloWorld();
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter your user id :");
        int userId = sc.nextInt();
        if(lm.authenticateUser(userId)) {
            System.out.println("Enter the book id you want to Borrow: ");
            int bookId = sc.nextInt();
            int bookAvailability = lm.bookAvailabalityCheck(bookId);
            if(bookAvailability == 1) {
                System.out.println("Your requested book is available. Do you want to proceed with Borrowing?\n");
                System.out.println("1. Yes\n2. No\n");
                try {
                    int choice = sc.nextInt();
                    if(choice == 1) {
                        booksCopies.put(bookId, (booksCopies.get(bookId) - 1));
                        System.out.println("Borrowing Successfull");
                        lm.incrementUserTransaction(userId);
                        LocalDate localDate = LocalDate.now();
                        String dateOfTransaction = DateTimeFormatter.ofPattern("dd/MM/yyy").format(localDate);
                        Transaction transaction = new Transaction();
                        transaction.setUserId(userId);
                        transaction.setBookId(bookId);
	                    transaction.setDateOfTransaction(dateOfTransaction);
	                    transaction.setTransactionType("Borrow");
	                    transaction.setTransactionId(transactionsList.size() + 1);
	                    ArrayList userTransactions = (ArrayList) userTransactionsList.get(userId);
	                    if(userTransactions != null) {
	                    	userTransactions.add(transactionsList.size() + 1);
	                        userTransactionsList.put(userId, userTransactions);
	                    }
	                    else {
	                    	userTransactions = new ArrayList();
	                    	userTransactions.add(transactionsList.size() + 1);
	                    	userTransactionsList.put(userId, userTransactions);
	                    }
	                    transactionsList.add(transaction);
                        lm.existingUser();
                    }
                    else if(choice == 2)
                        lm.existingUser();
                }
                catch(Exception e) {
                    System.out.println("Please enter a valid option in exception block");
                }
            }
            else if(bookAvailability == 0)
                System.out.println("Selected book is not available for borrowing. It is already borrowed by other user.");
            else if(bookAvailability == -1)
                System.out.println("Please enter valid book id");
        }
        else {
            System.out.println("Invalid User");
        }
    }
    public void returnBook() {
        Scanner sc = new Scanner(System.in);
        HelloWorld lm = new HelloWorld();
        System.out.println("Enter your user id :");
        int userId = sc.nextInt();
        if(lm.authenticateUser(userId)) {
            System.out.println("Enter the book id you want to return: ");
            int bookId = sc.nextInt();
            int bookAvailability = lm.bookAvailabalityCheckDup(bookId);
            if(bookAvailability == 1) {
                System.out.println("Do you want to proceed with returning?\n");
                System.out.println("1. Yes\n2. No\n");
                try {
                    int choice = sc.nextInt();
                    if(choice == 1) {
                        booksCopies.put(bookId, (booksCopies.get(bookId) - 1));
                        System.out.println("Returing of book is successfull");
                        lm.incrementUserTransaction(userId);
                        LocalDate localDate = LocalDate.now();
                        String dateOfTransaction = DateTimeFormatter.ofPattern("dd/MM/yyy").format(localDate);
                        Transaction transaction = new Transaction();
                        transaction.setUserId(userId);
                        transaction.setBookId(bookId);
	                    transaction.setDateOfTransaction(dateOfTransaction);
	                    transaction.setTransactionType("Return");
	                    transaction.setTransactionId(transactionsList.size() + 1);
	                    ArrayList userTransactions = (ArrayList) userTransactionsList.get(userId);
	                    if(userTransactions != null) {
	                    	userTransactions.add(transactionsList.size() + 1);
	                        userTransactionsList.put(userId, userTransactions);
	                    }
	                    else {
	                    	userTransactions = new ArrayList();
	                    	userTransactions.add(transactionsList.size() + 1);
	                    	userTransactionsList.put(userId, userTransactions);
	                    }
	                    transactionsList.add(transaction);
                        lm.existingUser();
                    }
                    else if(choice == 2)
                        lm.existingUser();
                }
                catch(Exception e) {
                    System.out.println("Please enter a valid option");
                }
            }
            else if(bookAvailability == 0)
                System.out.println("Selected book is not available for returning. All the copies are already present in the library.");
            else if(bookAvailability == -1)
                System.out.println("Please enter valid book id");
        }
        else {
            System.out.println("Invalid User");
        }
    }
    public void donateBook() throws MyException {
        Scanner sc = new Scanner(System.in);
        HelloWorld lm = new HelloWorld();
        System.out.println("Enter your user id :");
        int userId = sc.nextInt();
        if(lm.authenticateUser(userId)) {
            System.out.println("Enter the book details you want to donate: ");
            System.out.println("Enter book name:");
            String bookName = sc.next();
            if(lm.checkForExistanceOfBook(bookName)) {
            	int bookId = getBookIdOfExistingBook(bookName);
            	System.out.println("Enter the number of copies you want to donate: ");
                String copiesString = sc.next();
                int copies = 0;
                try {
                    copies = Integer.parseInt(copiesString);
                    copies = copies + booksCopies.get(bookId);
                }
                catch(NumberFormatException e) {
                	StringBuilder exceptionMessage = new StringBuilder("Please enter integer value only");
                    throw new MyException(exceptionMessage.append(e.getMessage()).toString());
                }
                booksCopies.put(new Integer(bookId), new Integer(copies));
                booksCopiesTreshold.put(new Integer(bookId), new Integer(copies));
                System.out.println("Thank you for donating the book to our library");
                lm.incrementUserTransaction(userId);
                LocalDate localDate = LocalDate.now();
                String dateOfTransaction = DateTimeFormatter.ofPattern("dd/MM/yyy").format(localDate);
                Transaction transaction = new Transaction();
                transaction.setUserId(userId);
                transaction.setBookId(bookId);
                transaction.setDateOfTransaction(dateOfTransaction);
                transaction.setTransactionType("Donate");
                transaction.setTransactionId(transactionsList.size() + 1);
                ArrayList userTransactions = (ArrayList) userTransactionsList.get(userId);
                if(userTransactions != null) {
                	userTransactions.add(transactionsList.size() + 1);
                    userTransactionsList.put(userId, userTransactions);
                }
                else {
                	userTransactions = new ArrayList();
                	userTransactions.add(transactionsList.size() + 1);
                	userTransactionsList.put(userId, userTransactions);
                }
                transactionsList.add(transaction);
                lm.existingUser();
            }
            else {
            	int bookId = booksList.size() + 1;
            	System.out.println("Enter book author:");
                String bookAuthor = sc.next();
                System.out.println("Enter book price:");
                double bookPrice = sc.nextDouble();
                System.out.println("Enter the number of copies you want to donate: ");
                String copiesString = sc.next();
                int copies = 0;
                try {
                    copies = Integer.parseInt(copiesString);
                }
                catch(NumberFormatException e) {
                    StringBuilder exceptionMessage = new StringBuilder("Please enter integer value only");
                    throw new MyException(exceptionMessage.append(e.getMessage()).toString());
                }
                Book newBook = new Book();
                newBook.setBookId(bookId);
                newBook.setBookName(bookName);
                newBook.setBookAuthor(bookAuthor);
                newBook.setBookPrice(bookPrice);
                newBook.setBookAvailability(true);
                booksList.add(newBook);
                booksCopies.put(new Integer(bookId), new Integer(copies));
                booksCopiesTreshold.put(new Integer(bookId), new Integer(copies));
                System.out.println("Thank you for donating the book to our library");
                lm.incrementUserTransaction(userId);
                LocalDate localDate = LocalDate.now();
                String dateOfTransaction = DateTimeFormatter.ofPattern("dd/MM/yyy").format(localDate);
                Transaction transaction = new Transaction();
                transaction.setUserId(userId);
                transaction.setBookId(bookId);
                transaction.setDateOfTransaction(dateOfTransaction);
                transaction.setTransactionType("Donate");
                transaction.setTransactionId(transactionsList.size() + 1);
                ArrayList userTransactions = (ArrayList) userTransactionsList.get(userId);
                if(userTransactions != null) {
                	userTransactions.add(transactionsList.size() + 1);
                    userTransactionsList.put(userId, userTransactions);
                }
                else {
                	userTransactions = new ArrayList();
                	userTransactions.add(transactionsList.size() + 1);
                	userTransactionsList.put(userId, userTransactions);
                }
                transactionsList.add(transaction);
                lm.existingUser();
            }
        }
        else {
            System.out.println("Invalid User");
        }
    }
    public void changeDetails() {
        Scanner sc = new Scanner(System.in);
        HelloWorld lm = new HelloWorld();
        System.out.println("Enter your user id :");
        int userId = sc.nextInt();
        if(lm.authenticateUser(userId)) {
            System.out.println("Enter your new desired username: ");
            String userName = sc.next();
            for(int i = 0; i < usersList.size(); i++) {
                if(usersList.get(i).getUserId() == userId)
                    usersList.get(i).setUserName(userName);
            }
            System.out.println("Your username is successfully changed");
            lm.incrementUserTransaction(userId);
            LocalDate localDate = LocalDate.now();
            String dateOfTransaction = DateTimeFormatter.ofPattern("dd/MM/yyy").format(localDate);
            Transaction transaction = new Transaction();
            transaction.setUserId(userId);
            transaction.setBookId(-1);
            transaction.setDateOfTransaction(dateOfTransaction);
            transaction.setTransactionType("Username Change");
            transaction.setTransactionId(transactionsList.size() + 1);
            ArrayList userTransactions = (ArrayList) userTransactionsList.get(userId);
            if(userTransactions != null) {
            	userTransactions.add(transactionsList.size() + 1);
                userTransactionsList.put(userId, userTransactions);
            }
            else {
            	userTransactions = new ArrayList();
            	userTransactions.add(transactionsList.size() + 1);
            	userTransactionsList.put(userId, userTransactions);
            }
            transactionsList.add(transaction);
            lm.existingUser();
        }
        else {
            System.out.println("Invalid User");
        }
    }
    public void listAllBooks() {
        HelloWorld lm = new HelloWorld();
        System.out.println("All the books available in the library are:");
        for(int i = 0; i < booksList.size(); i++)
            System.out.println(booksList.get(i).getBookId() + " - " + booksList.get(i).getBookName() + " - " + booksList.get(i).getBookAuthor() + " - " + booksList.get(i).getBookPrice() + " - " + booksList.get(i).getBookAvailability() + " - " + booksCopies.get(new Integer(booksList.get(i).getBookId())) + " Copies");
        lm.existingUser();
    }
    public void listUsers() {
        HelloWorld lm = new HelloWorld();
        System.out.println("All the users of the library are:");
        for(int i = 0; i < usersList.size(); i++)
            System.out.println(usersList.get(i).getUserId() + " - " + usersList.get(i).getUserName());
        lm.existingUser();
    }
    public void knowYourTransactions() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter your User id : ");
        int userId = sc.nextInt();
        for(User user: usersList) {
            if(user.getUserId() == userId)
                System.out.println("You have done " + user.getUserTransactions() + " transactions upto now");
        }
    }
    public void knowYourTransactionsDetails() {
    	Scanner sc = new Scanner(System.in);
    	HelloWorld lm = new HelloWorld();
    	System.out.println("Enter your User id: ");
    	int userId = sc.nextInt();
    	boolean flag = false;
    	for(Transaction transaction: transactionsList) {
    		if(transaction.getUserId() == userId) {
    		    flag = true;
    		    System.out.println(transaction.getTransactionId() + " - " + transaction.getBookId() + " - " + transaction.getDateOfTransaction() + " - " + transaction.getTransactionType());    
    		}
    	}
    	if(flag == false)
    	    System.out.println("You didn't do any transactions till now");
    	lm.existingUser();
    }
    public void writeToExcel() {
    	Workbook workBook = new HSSFWorkbook();
    	Sheet sheet = workBook.createSheet("Library Books");
    	int rowCount = 0;
    	for(int userId: userTransactionsList.keySet()) {
    		int numberOfTransactions = 0;
    		User currentUser = null;
    		for(User user: usersList) {
    			if(user.getUserId() == userId) {
    				numberOfTransactions = user.getUserTransactions();
    				currentUser = user;
    			}
    		}
    		int colCount = 0;
    		CellRangeAddress newCell = new CellRangeAddress(rowCount, numberOfTransactions - 1, colCount, colCount);
    		sheet.addMergedRegion(newCell);
    		// have to work here..........................
    	}
    }
    public boolean validateUserName(String userName) {
        Pattern pattern = Pattern.compile("A-Za-z0-9");
        Matcher matcher = pattern.matcher(userName);
        boolean valid = matcher.matches();
        return valid;
    }
    public int bookAvailabalityCheck(int bookId) {
        if(booksCopies.get(bookId) >= 1)
            return 1;
        else if(booksCopies.get(bookId) <= 0)
            return 0;
        else
            return -1;
    }
    public int bookAvailabalityCheckDup(int bookId) {
        if(booksCopies.get(bookId) == 0)
            return 1;
        else if(booksCopies.get(bookId) >= booksCopiesTreshold.get(bookId))
            return 0;
        else
            return -1;
    }
    public boolean authenticateUser(int userId) {
        for(int i = 0; i < usersList.size(); i++) {
            if(usersList.get(i).getUserId() == userId)
                return true;
        }
        return false;
    }
    public void incrementUserTransaction(int userId) {
        for(User user: usersList) {
            if(user.getUserId() == userId)
                user.setUserTransactions(user.getUserTransactions() + 1);
        }
    }
    public boolean checkForExistanceOfBook(String bookName) {
    	for(Book book: booksList) {
    		if(book.getBookName().compareTo(bookName) == 0)
    			return true;
    	}
    	return false;
    }
    public int getBookIdOfExistingBook(String bookName) {
    	for(Book book: booksList) {
    		if(book.getBookName().compareTo(bookName) == 0)
    			return book.getBookId();
    	}
    	return -1;
    }
    public static void setStaticValues() {
        User temp = new User();
        temp.setUserId(1);
        temp.setUserName("Vasishta");
        usersList.add(temp);
        User temp1 = new User();
        temp1.setUserId(2);
        temp1.setUserName("Sarath");
        usersList.add(temp1);
        User temp2 = new User();
        temp2.setUserId(3);
        temp2.setUserName("Ganesh");
        usersList.add(temp2);
        User temp3 = new User();
        temp3.setUserId(4);
        temp3.setUserName("Avinash");
        usersList.add(temp3);
        Book newBook = new Book();
        newBook.setBookId(1);
        newBook.setBookName("Java");
        newBook.setBookAuthor("Bala Guru Swamy");
        newBook.setBookPrice(1050);
        newBook.setBookAvailability(true);
        booksList.add(newBook);
        Book newBook1 = new Book();
        newBook1.setBookId(2);
        newBook1.setBookName("Let Us C");
        newBook1.setBookAuthor("Yeshwanth Khanetkar");
        newBook1.setBookPrice(950);
        newBook1.setBookAvailability(true);
        booksList.add(newBook1);
        booksCopies.put(new Integer(1), new Integer(3));
        booksCopies.put(new Integer(2), new Integer(9));
        booksCopiesTreshold.put(new Integer(1), new Integer(3));
        booksCopiesTreshold.put(new Integer(2), new Integer(9));
    }
}
